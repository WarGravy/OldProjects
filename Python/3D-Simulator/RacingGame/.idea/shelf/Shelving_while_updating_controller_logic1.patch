Index: entityMgr.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- entityMgr.py	(revision 74370ffaf7628253136ce64f21e94ff41883b0d3)
+++ entityMgr.py	(revision )
@@ -7,10 +7,10 @@
 # Entity manager. 
 #     Create and keep track of all game entities.
 import ent
-import utils
 from vector import Vector3
 import ogre.renderer.OGRE as ogre
 
+
 class EntityMgr:
     def __init__(self, engine):
         self.engine = engine
@@ -19,8 +19,8 @@
         pass
 
     def init(self):
-    	self.entTypes = [ent.CIGARETTE,]
+        self.entTypes = [ent.PLAYER, ]
-    	self.aiTypes = [ent.AIEnt, ]
+        self.aiTypes = [ent.AIEnt, ]
         pass
 
     def tick(self, dt):
@@ -30,6 +30,7 @@
     def stop(self):
         del self.entities
         pass
+
     #Required to add the entity to the graphix node
     def createGent(self, mid, mmesh, mpos, myaw, isPrimaryPlayer = False):
         sceneManager = self.engine.gfxMgr.sceneManager
@@ -41,7 +42,6 @@
         #check if this is the player node
         if isPrimaryPlayer:
             node = sceneManager.getRootSceneNode().createChildSceneNode('player1node', mpos)
-	    
         else:
             node = sceneManager.getRootSceneNode().createChildSceneNode(mid + 'node', mpos)
         
@@ -49,14 +49,14 @@
         return node
 
     def createEnt(self, entType, pos = Vector3(0,0,0), yaw = 0, isAI = False, isPrimaryPlayer = False ):
-    	ai = isAI
+        ai = isAI
         ent = entType(len(self.entities) + 1, pos = pos, yaw = yaw, isAI= ai)
-        self.entities[self.nEnts] = ent;
+        self.entities[self.nEnts] = ent
         self.nEnts += 1
         #Sushil Louis' Code: Add entity to a node
         gfxNode = self.createGent(ent.uiname + str(ent.eid), ent.mesh, ent.pos, ent.heading, isPrimaryPlayer)
         ent.node = gfxNode
-	ent.node.yaw(ogre.Degree(90)) #DOES NOT WORK
+        ent.node.yaw(ogre.Degree(90)) #DOES NOT WORK
         return ent
 
     def createWaypoint(self, id, pos = Vector3(0,0,0), heading = 0):
@@ -66,6 +66,17 @@
         node = sceneManager.getRootSceneNode().createChildSceneNode(wp.eid + 'node', wp.pos)
         node.attachObject(e)
         wp.node = node
-	wp.node.scale(1, 1, .1) # Change size
-	wp.node.yaw(heading) # Change direction
+        wp.node.scale(1, 1, .1) # Change size
+        wp.node.yaw(heading) # Change direction
         return wp
+
+    def createBuilding(self, id, pos = Vector3(0, 0, 0), heading = 0):
+        bldg = ent.Building(id, pos = pos, heading = heading)
+        sceneManager = self.engine.gfxMgr.sceneManager
+        e = sceneManager.createEntity(bldg.eid, bldg.mesh)
+        node = sceneManager.getRootSceneNode().createChildSceneNode(bldg.eid + 'node', bldg.pos)
+        node.attachObject(e)
+        bldg.node = node
+        bldg.node.scale(0.5, 2, 0.5)
+        bldg.node.yaw(heading)
+        return bldg
\ No newline at end of file
Index: data/materials/scripts/Example.material
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data/materials/scripts/Example.material	(revision 74370ffaf7628253136ce64f21e94ff41883b0d3)
+++ data/materials/scripts/Example.material	(revision )
@@ -86,6 +86,24 @@
 		}
 	}
 }
+material Examples/CitySkyBox
+{
+	technique
+	{
+		pass
+		{
+			lighting off
+			depth_write off
+
+			texture_unit
+			{
+				cubic_texture city.jpg combinedUVW
+				tex_address_mode clamp
+				env_map cubic_reflection
+			}
+		}
+	}
+}
 material Examples/SceneSkyBox1
 {
 	technique
Index: gameMgr.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gameMgr.py	(revision 74370ffaf7628253136ce64f21e94ff41883b0d3)
+++ gameMgr.py	(revision )
@@ -14,6 +14,7 @@
         self.states = ["Menu Screen", "Playing", "Stopped"]
         self.levels = ["WaterLevel",]
         self.waypoints = []
+        self.mapfeatures = []
         self.completed = 0
         self.falsePositive = True
         self.levelRange = 0
@@ -47,7 +48,23 @@
         self.waypoints.append(self.engine.entityMgr.createWaypoint('6', pos = Vector3(-1500, 0, -800), heading = 0).pos)
         self.waypoints.append(self.engine.entityMgr.createWaypoint('7', pos = Vector3(-1500, 0, 0), heading = 0).pos)
         pass
-        
+
+    def loadCityLevel(self):
+        # Level Range
+        self.levelRange = 3000
+        x = 0
+
+        # Create Primary Player Entity
+        entType = self.engine.entityMgr.entTypes[0]
+        ent = self.engine.entityMgr.createEnt(entType, pos = Vector3(x, 0, 0), isPrimaryPlayer = True)
+        self.player = ent
+        x += 300
+
+        # Create Waypoints
+
+        # Create Buildings
+
+        pass
 
     def startGame1(self):
         print "Game Started"
Index: resources.cfg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources.cfg	(revision 74370ffaf7628253136ce64f21e94ff41883b0d3)
+++ resources.cfg	(revision )
@@ -23,6 +23,7 @@
 FileSystem=data/particle
 FileSystem=data/gui
 Zip=data/packs/mountains.zip
+Zip=data/packs/city.zip
 Zip=data/packs/cubemap.zip
 Zip=data/packs/cubemapsJS.zip
 Zip=data/packs/dragon.zip
Index: ent.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ent.py	(revision 74370ffaf7628253136ce64f21e94ff41883b0d3)
+++ ent.py	(revision )
@@ -53,14 +53,14 @@
         x = "Entity: %s \nPos: %s, Vel: %s,  mesh = %s\nSpeed: %f, Heading: %f" % (self.eid, str(self.pos), str(self.vel), self.mesh, self.speed, self.heading)
         return x
 
-class CIGARETTE(Entity): # General settings. Other Drone stats can be modified from this.
+class PLAYER(Entity): # General settings. Other Drone stats can be modified from this.
     def __init__(self, id, pos = Vector3(0,0,0), vel = Vector3(0, 0, 0), yaw = 0, isAI = False):
         Entity.__init__(self, id, pos = pos, vel = vel, yaw = yaw, isAI = isAI)
         self.mesh = 'EnemyFighter.mesh'
-        self.uiname = 'CIGARETTE'
+        self.uiname = 'PLAYER'
         self.acceleration  = 80 # Changed by Sara for better drone speed
         self.drift = 2 # Added by Sara. The speed at which an entity slows down after after acceleration (or reverse) key is no longer being pushed.
-        self.turningRate   = .0001 # Changed by Sara for better drone
+        self.turningRate   = .0002 # Changed by Sara for better drone
         self.climbingSpeed = .009 # Added by Sara. Speed at which drone can go up
         self.maxSpeed = 200 # Changed by Sara for better drone speed
         self.desiredSpeed = 0
@@ -90,13 +90,29 @@
         Entity.__init__(self, id, pos = pos, vel = vel, yaw = yaw, isAI = isAI)
         self.mesh = 'cube.mesh'
         self.uiname = 'Waypoint'
+        self.acceleration  = 0
+        self.drift = 0
+        self.turningRate   = 0
+        self.climbingSpeed = 0
+        self.maxSpeed = 0
+        self.desiredSpeed = 0
+        self.desiredHeading = 0
+        self.speed = 0
+        self.heading = heading
+        self.height = 0
+
+class Building(Entity):
+    def __init__(self, id, pos = Vector3(0, 0, 0), vel = Vector3(0, 0, 0), yaw = 0, isAI = True, heading = 0):
+        Entity.__init__(self, id, pos = pos, vel = vel, yaw = yaw, isAI = isAI)
+        self.mesh = 'building.mesh'
+        self.uiname = 'Building'
-        self.acceleration  = 0
+        self.acceleration = 0
         self.drift = 0
-        self.turningRate   = 0
+        self.turningRate = 0
         self.climbingSpeed = 0
         self.maxSpeed = 0
         self.desiredSpeed = 0
         self.desiredHeading = 0
         self.speed = 0
         self.heading = heading
-        self.height = 0
+        self.height = 0
\ No newline at end of file
